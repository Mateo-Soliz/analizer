3. Decisiones de diseño y arquitectura
Frontend:
React.js: Se eligió React por su capacidad para crear interfaces modernas, reactivas y altamente interactivas. Permite una experiencia de usuario fluida y responsiva, fundamental para la visualización de datos biomédicos.
Tailwind CSS: Framework de utilidades CSS que facilita el diseño responsivo y la personalización visual rápida, asegurando una interfaz atractiva y profesional.
react-hook-form: Para la gestión eficiente de formularios, validaciones y experiencia de usuario en la carga y configuración de análisis.
react-chartjs-2 y Chart.js: Para la visualización interactiva de los resultados, permitiendo gráficos personalizables y exportables.
Backend:
Node.js + Next.js: Permite un desarrollo fullstack moderno, con API RESTful y SSR (Server Side Rendering) para mejorar el SEO y la velocidad de carga.
Express (integrado en Next.js): Para la gestión de rutas y lógica de negocio.
Multer: Para la gestión de subida de archivos (Excel, CSV).
JWT (JSON Web Token): Para la autenticación segura de usuarios y protección de rutas junto la autenticación con firebase.
MongoDB + Mongoose: Base de datos NoSQL elegida por su flexibilidad y escalabilidad, ideal para almacenar resultados de análisis y usuarios.
Análisis de datos:
Algoritmos migrados desde Python: Se han adaptado algoritmos validados en entornos universitarios (modelo cosinor, análisis de amplitud, acrofase, pruebas de Mann-Whitney, etc.) a JavaScript para su ejecución en el backend, garantizando resultados robustos y comparables con la literatura científica.
ml-levenberg-marquardt: Para el ajuste no lineal de modelos circadianos.
simple-statistics: Para cálculos estadísticos adicionales (media, varianza, pruebas U, etc.).
Python (analizador.py):
Se mantiene un script en Python para validación cruzada y comparación de resultados, usando librerías como numpy, pandas, matplotlib, scipy y scikit-learn. Esto asegura que los resultados de la plataforma web sean consistentes con los obtenidos en entornos científicos tradicionales.
4. Flujo de uso y experiencia de usuario
Registro e inicio de sesión: El usuario puede crear una cuenta y acceder a su espacio personal.
Carga de datos: Se permite subir archivos Excel o CSV. El sistema valida el formato y extrae los datos relevantes.
Configuración del análisis: El usuario puede seleccionar parámetros, tipo de análisis y personalizar los gráficos (nombres de ejes, colores, etc.).
Ejecución y visualización: El backend procesa los datos, ajusta los modelos circadianos y devuelve resultados numéricos y gráficos interactivos.
Gestión de resultados: El usuario puede guardar, exportar o compartir los análisis realizados.
5. Justificación de las herramientas y decisiones
React y Next.js: Permiten un desarrollo ágil, escalable y con buenas prácticas, facilitando la integración de frontend y backend en un solo proyecto.
Tailwind CSS: Acelera el diseño y asegura consistencia visual.
MongoDB: Su naturaleza flexible es ideal para datos heterogéneos y escalabilidad futura.
JWT: Proporciona autenticación robusta y escalable.
ml-levenberg-marquardt y simple-statistics: Permiten replicar análisis circadianos avanzados directamente en el backend, sin depender de lenguajes externos.
Python: Se utiliza para validación y comparación, asegurando la fiabilidad científica de la plataforma.
Multer y xlsx: Facilitan la carga y procesamiento de archivos de datos, una necesidad clave para el usuario objetivo.
6. Ventajas y aportaciones
Accesibilidad: No requiere instalación ni conocimientos de programación.
Unificación: Integra en una sola plataforma todas las funcionalidades necesarias para el análisis circadiano.
Personalización: Permite adaptar los gráficos y resultados a las necesidades de publicación científica.
Escalabilidad: Arquitectura preparada para crecer y añadir nuevas funcionalidades (más tipos de análisis, internacionalización, SaaS).